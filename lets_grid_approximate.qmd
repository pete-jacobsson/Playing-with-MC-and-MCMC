---
title: "Lets Grid Approximate"
format: html
---

This is another MacKay inspired excercise. Here we'll try to solve the following problem by grid approximation:
* We are throwing a bent coin (aka magical device invented for purposes of probability analysis)
* We receive a certain number of heads in a certain number of throws
* What is the probability of heads coming up on the coin?

This is very much an exercise in Bayesian inference. Normally this could be solved easily using the Beta-binomial conjugate prior. However, in this case we will use it to have a look at writing a grid approximation solution. Why? Because it is fun!

```{r}
## First set up the grid. We will take 100 points from 0 to 1. Next we shall assign a uniform prior across the grid.

grid_results <- data.frame(grid = seq(from = 0, to = 1, length.out = 100))

```

Next we need some outcome data for the coin tosses. Lets say we did 30 tosses, with 12 Heads coming total. From here we can calculate the likelihood function as required. [NOTE TO SELF: given time, put in the equations here]

```{r}

likelihood_function <- function (n_head, n_total, p_head){
  likelihood <- choose(n_total, n_head) * p_head ^ n_head * (1 - p_head) ^ (n_total - n_head)
  likelihood
}

likelihood_function(n_head = 12, n_total = 30, p_head = 0.5)

```

```{r}
## Lets get the likelihoods into the table
library(dplyr)
library(ggplot2)

grid_results <- grid_results %>%
  mutate(likelihood = likelihood_function(12, 30, grid))


##At this stafe we can plot the likelihood function
grid_results %>%
  ggplot(aes(x = grid, y = likelihood)) +
  geom_bar(stat = "identity", color = "grey40", fill = "grey40") +
  theme_bw()
  

```
So we have the likelihood function. Good news - on a uniform prior it is proportional to the actual posterior distribution. Still it is not a probability distribution. To get that we need a couple more steps :)

First of these is to get a prior distribution. Given that we are between zero and one, and given the nature of the problem, lets model it using a Beta distribution (2, 2) - we would like to believe that the coin is not very bent.

```{r}
grid_results <- grid_results %>%
  mutate(
    prior = dbeta(grid, grid, 2, 2),
    likelihood_times_prior = likelihood * prior)


grid_results %>%
  ggplot(aes(x = grid)) +
  geom_bar(aes(y = likelihood_times_prior), stat = "identity", color = "grey60", fill = "grey60") +
    geom_bar(aes(y = likelihood), stat = "identity", color = "grey40", fill = "grey40") +
  theme_bw()

```

Now we need the denominator - in this case it is the sum of everything from the numerator.
```{r}
denominator <- sum(grid_results$likelihood_times_prior, na.rm = TRUE)

grid_results <- grid_results %>%
  mutate(posterior = likelihood_times_prior / denominator)

## Check posterior sums to one
sum(grid_results$posterior, na.rm = TRUE)

grid_results %>%
  ggplot(aes(x = grid)) +
  geom_bar(aes(y = likelihood_times_prior), stat = "identity", color = "grey60", fill = "grey60") +
    geom_bar(aes(y = posterior), stat = "identity", color = "grey40", fill = "grey40") +
  theme_bw()

```

Now lets wrap it into a function!

The function will require the following inputs:
* The data
* Priors

```{r}

library(dplyr)
library(ggplot2)

calculate_likelihood <- function (n_s, n_t, p_s){
  # Function to calculate likelihood on Bernoulli trials (P(ns|ps))
  # n_s = number successes; n_t = total trials; p_s = prob of success on trial
  # Returns P(n_s|p_s)
  # Assumes n_s, n_t are integers; p_s is probability
  
  likelihood <- choose(n_t, n_s) * p_s ^ n_s * (1 - p_s) ^ (n_t - n_s)
  likelihood
}

approximate_binomial_grid <- function(n_s, n_t, prior_a, prior_b){
  #n_s = n_success; n_t = total Bernoulli trials; prior = params for beta distrib
  #Function returns a data frame with the grid points (theta), prior and posterior distribs
  #Function assumes all inputs are integers
  
  grid_results <- data.frame(theta = seq(from = 0, to = 1, length.out = 100)) %>%
     mutate(
       likelihood = calculate_likelihood(n_s, n_t, theta),
       prior = dbeta(theta, prior_a, prior_b),
       likelihood_times_prior = likelihood * prior
       )
  
  norm_constant <- sum(grid_results$likelihood_times_prior, na.rm = TRUE)
  
  grid_results <- grid_results %>%
    mutate(posterior = likelihood_times_prior / norm_constant) %>%
    select(theta, prior, posterior)
  
  grid_results
}


# Test 1
approximate_binomial_grid(12, 30, 4, 4) %>%
  mutate(prior = prior/100) %>% #scale prior for visualization
  ggplot(aes(x = theta)) +
  geom_bar(aes(y = prior), stat = "identity", color = "gray30", fill = "gray30") +
  geom_bar(aes(y = posterior), stat = "identity", color = "darkgreen", fill = "darkgreen")

approximate_binomial_grid(12, 30, 4, 40) %>%
  mutate(prior = prior/100) %>% #scale prior for visualization
  ggplot(aes(x = theta)) +
  geom_bar(aes(y = prior), stat = "identity", color = "gray30", fill = "gray30") +
  geom_bar(aes(y = posterior), stat = "identity", color = "darkgreen", fill = "darkgreen")

approximate_binomial_grid(200, 300, 4, 40) %>%
  mutate(prior = prior/100) %>% #scale prior for visualization
  ggplot(aes(x = theta)) +
  geom_bar(aes(y = prior), stat = "identity", color = "gray30", fill = "gray30") +
  geom_bar(aes(y = posterior), stat = "identity", color = "darkgreen", fill = "darkgreen")



##Test 2
sum(approximate_binomial_grid(12, 30, 4, 4)$posterior)
sum(approximate_binomial_grid(12, 30, 4, 40)$posterior)
sum(approximate_binomial_grid(200, 300, 4, 40)$posterior)
#Check if probs sum to 1


```
So, now we have a working couple of functions making grid estimates of this particular model possible. Lets stick these two functions into an R package. This will be my first attempt at doing this, lets see how it explodes! (for reference, I'm using https://ourcodingclub.github.io/tutorials/writing-r-package/#:~:text=To%20get%20started%20on%20a,with%20the%20New%20Directory%20option. as reference).

```{r}
##Install and run the packages required to create the packages (Chicken and egg?)
install.packages("devtools")
install.packages("roxygen2")

library(devtools)
library(roxygen2)
```


In the next step, I create a file containing the script for our functions. Trust me on this one.

Now lets see if we can load it...


```{r}
setwd("/home/pete/Documents/GitHub/Playing-with-MC-and-MCMC/bayes_from_scratch_r_package")
rm(calculate_likelihood)
rm(approximate_binomial_grid)

load_all(".")

```
Attempt 1: FAIL - needed to add the information to the DESCRIPTION file. Ooopsie.
Attempt 2: FAIL - Code chunk hung up. Try in a script.

